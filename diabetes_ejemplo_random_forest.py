# -*- coding: utf-8 -*-
"""Diabetes ejemplo Random Forest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BR6NhT_awLc6g0A6s9Fr3wuoICUib-xy
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Paso 2: Cargar el conjunto de datos de diabetes sin encabezados
url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv"
data = pd.read_csv(url, header=None)

# Definir los nombres de las columnas
data.columns = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',
               'BMI', 'DiabetesPedigreeFunction', 'Age', 'valorEsperado']

# Mostrar las primeras filas del conjunto de datos
print(data.head()) #imprimir datos

# Paso 3: Separar las características y la variable objetivo
X = data.drop('valorEsperado', axis=1)
y = data['valorEsperado']

# Paso 4: Dividir los datos en conjuntos de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Paso 5: Inicializar y entrenar el clasificador
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Paso 6: Hacer predicciones
y_pred = model.predict(X_test)

# Paso 7: Generar un reporte de clasificación
report = classification_report(y_test, y_pred, target_names=['No Diabetes', 'Diabetes'])
#Imprimimos pero en español
print(report.replace("precision", "Precisión")
              .replace("recall", "Sensibilidad")
              .replace("f1-score", "Puntuación F1")
              .replace("support", "Soporte")
              .replace("accuracy", "Exactitud"))

# Paso 8: Generar la matriz de confusión
conf_matrix = confusion_matrix(y_test, y_pred)

# Visualizar la matriz de confusión
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.ylabel('Actual')
plt.xlabel('Predicho')
plt.title('Matriz de Confusión')
plt.show()

nuevo_dato = pd.DataFrame({
    'Pregnancies': [2],
    'Glucose': [120],
    'BloodPressure': [70],
    'SkinThickness': [25],
    'Insulin': [100],
    'BMI': [30.5],
    'DiabetesPedigreeFunction': [0.5],
    'Age': [30]
})

# Paso 3: Hacer la predicción
prediccion = model.predict(nuevo_dato)

# Mostrar resultado
resultado = "Diabetes" if prediccion[0] == 1 else "No Diabetes"
print("El nuevo dato indica:", resultado)